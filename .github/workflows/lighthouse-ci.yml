name: Lighthouse CI

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to run Lighthouse on'
        required: false
        default: 'http://localhost:8080'

permissions:
  issues: write
  contents: read

jobs:
  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install dependencies
        run: |
          npm install -g @lhci/cli@0.14.x http-server
          
      - name: Start local server
        run: |
          http-server . -p 8080 &
          sleep 10
        
      - name: Run Lighthouse CI
        id: lighthouse
        continue-on-error: true
        run: |
          URL="${{ github.event.inputs.url || 'http://localhost:8080' }}"
          lhci autorun \
            --collect.url=$URL \
            --upload.target=filesystem \
            --outputDir=./lhci_reports

          
      - name: Create GitHub Issue with Results
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const reportPath = path.join(process.env.GITHUB_WORKSPACE, 'lhci_reports', 'manifest.json');
            if (!fs.existsSync(reportPath)) {
              core.setFailed(`manifest.json not found: ${reportPath}`);
              return;
            }
            const results = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            let body = "";

             results.forEach((r, i) => {
              const s     = r.summary;
              const pct   = v => Math.round(v * 100);
              const badge = v => (v >= 90 ? '🟢' : v >= 70 ? '🟠' : '🔴');
              Object.keys(s).forEach(k => s[k] = pct(s[k]));

              body += [
                `## ⚡️ Lighthouse report ${i}`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${badge(s.performance)} Performance | ${s.performance} |`,
                `| ${badge(s.accessibility)} Accessibility | ${s.accessibility} |`,
                `| ${badge(s['best-practices'])} Best practices | ${s['best-practices']} |`,
                `| ${badge(s.seo)} SEO | ${s.seo} |`,
                `| ${badge(s.pwa)} PWA | ${s.pwa} |`,
                `\n`,
              ].join("\n");
            });

            body += `\n> 📅 측정 시간: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 웹사이트 성능 측정 결과 - ${new Date().toLocaleString('ko-KR', { 
                timeZone: 'Asia/Seoul',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              })}`,
              body,
              labels: ['lighthouse-audit', 'web-vitals']
            });
